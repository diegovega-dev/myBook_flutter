// Mocks generated by Mockito 5.4.5 from annotations
// in proyecto_final/test/mock_database_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:proyecto_final/Model/models.dart' as _i3;
import 'package:proyecto_final/ViewModel/db_provider.dart' as _i2;
import 'package:proyecto_final/ViewModel/sesionProvider.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DatabaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseProvider extends _i1.Mock implements _i2.DatabaseProvider {
  MockDatabaseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Libro> get librosLeidos =>
      (super.noSuchMethod(
            Invocation.getter(#librosLeidos),
            returnValue: <_i3.Libro>[],
          )
          as List<_i3.Libro>);

  @override
  set librosLeidos(List<_i3.Libro>? _librosLeidos) => super.noSuchMethod(
    Invocation.setter(#librosLeidos, _librosLeidos),
    returnValueForMissingStub: null,
  );

  @override
  List<_i3.Usuario> get usuarios =>
      (super.noSuchMethod(
            Invocation.getter(#usuarios),
            returnValue: <_i3.Usuario>[],
          )
          as List<_i3.Usuario>);

  @override
  List<_i3.Libro> get libros =>
      (super.noSuchMethod(
            Invocation.getter(#libros),
            returnValue: <_i3.Libro>[],
          )
          as List<_i3.Libro>);

  @override
  List<_i3.LibroUsuario> get librosUsuario =>
      (super.noSuchMethod(
            Invocation.getter(#librosUsuario),
            returnValue: <_i3.LibroUsuario>[],
          )
          as List<_i3.LibroUsuario>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> cargarUsuarios() =>
      (super.noSuchMethod(
            Invocation.method(#cargarUsuarios, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cargarLibros() =>
      (super.noSuchMethod(
            Invocation.method(#cargarLibros, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cargarLibrosUsurio(_i3.Usuario? usuario) =>
      (super.noSuchMethod(
            Invocation.method(#cargarLibrosUsurio, [usuario]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> actualizarUser(_i3.Usuario? u) =>
      (super.noSuchMethod(
            Invocation.method(#actualizarUser, [u]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addUsuario(_i3.Usuario? usuario) =>
      (super.noSuchMethod(
            Invocation.method(#addUsuario, [usuario]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addLibro(_i3.Libro? libro) =>
      (super.noSuchMethod(
            Invocation.method(#addLibro, [libro]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertLibroUsuario(_i3.LibroUsuario? libroUsuario) =>
      (super.noSuchMethod(
            Invocation.method(#insertLibroUsuario, [libroUsuario]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeUsuario(_i3.Usuario? usuario) =>
      (super.noSuchMethod(
            Invocation.method(#removeUsuario, [usuario]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeLibro(_i3.Libro? libro) =>
      (super.noSuchMethod(
            Invocation.method(#removeLibro, [libro]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeLibroUsuario(_i3.LibroUsuario? libroUsuario) =>
      (super.noSuchMethod(
            Invocation.method(#removeLibroUsuario, [libroUsuario]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SesionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSesionProvider extends _i1.Mock implements _i6.SesionProvider {
  MockSesionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void login(_i3.Usuario? u) => super.noSuchMethod(
    Invocation.method(#login, [u]),
    returnValueForMissingStub: null,
  );

  @override
  void logout() => super.noSuchMethod(
    Invocation.method(#logout, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
